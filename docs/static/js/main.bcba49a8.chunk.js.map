{"version":3,"sources":["redux/actionConstants.js","redux/storeConstants.js","redux/reducers/loginReducer.js","redux/reducers/viewReducer.js","redux/reducers/userReducer.js","redux/reducers/threadReducer.js","redux/store.js","redux/reducers/testReducer.js","redux/actions/viewActions.js","components/ThreadSnippet.js","components/ThreadList.js","components/Reply.js","fbConfig.js","redux/actions/threadActions.js","components/NewReply.js","components/ThreadComponent.js","redux/actions/loginActions.js","components/NewThread.js","components/SearchTags.js","components/Login.js","view/App.js","reportWebVitals.js","index.js"],"names":["LOGIN_SUCCESS","INVALID_LOGIN","LOGIN_NETWORK_ERROR","LOGOUT","READ_THREADS","ADD_REPLY","VIEW_LIST","VIEW_SINGLE","VIEW_LOGIN","LOGIN_STATE","VIEW_STATE","INITIAL_STATE","loginState","view","singleId","searchTags","rootReducer","combineReducers","loginReducer","state","action","type","viewReducer","payload","threadId","user","threads","mergedReplies","filter","thread","id","replies","reply","newState","map","testState","createStore","applyMiddleware","thunkMiddleware","showList","showLogin","ThreadSnippet","props","dispatch","useDispatch","parseTags","rawBody","parsedBody","split","word","index","charAt","className","href","value","onClick","rtn","push","pop","data-testid","title","author","body","length","substring","seconds","dateTime","Date","toLocaleDateString","year","month","day","toLocaleTimeString","timeZone","hourCycle","parseTimestamp","timestamp","ThreadList","useSelector","Reply","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","database","firestore","readThreads","readAllThreads","collection","get","then","querySnapshot","forEach","doc","data","sort","threadA","threadB","catch","error","console","log","readThreadByTag","where","createReply","update","FieldValue","arrayUnion","addReply","NewReply","useState","setBody","placeholder","onChange","e","target","htmlFor","newThread","now","postReply","disabled","ThreadComponent","aria-label","validateUser","username","password","size","docs","loginSuccess","NewThread","setTitle","tags","setTags","useEffect","newTags","postThread","store","getState","add","newThreads","concat","createThread","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","rows","SearchTags","stateSearchTags","search","setSearch","setSearchTags","tagString","submitSearch","searchAll","onKeyUp","event","keyCode","preventDefault","editingBegun","Login","setUsername","setPassword","handleLogin","clearForm","handleKeyPress","name","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcba49a8.chunk.js","sourcesContent":["export const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const INVALID_LOGIN = \"INVALID_LOGIN\";\r\nexport const LOGIN_NETWORK_ERROR = \"LOGIN_NETWORK_ERROR\";\r\nexport const LOGOUT = \"LOGOUT\";\r\nexport const READ_THREADS = \"READ_THREADS\";\r\nexport const ADD_REPLY = \"ADD_REPLY\";\r\nexport const VIEW_LIST = \"VIEW_LIST\";\r\nexport const VIEW_SINGLE = \"VIEW_SINGLE\";\r\nexport const VIEW_LOGIN = \"VIEW_LOGIN\";","export const LOGIN_STATE = {\r\n    LOGGED_IN: \"logged in\",\r\n    LOGGED_OUT: \"logged out\",\r\n    INVALID_LOGIN: \"invalid login\",\r\n    NETWORK_ERROR: \"network error\"\r\n};\r\n\r\nexport const VIEW_STATE = {\r\n    THREAD_LIST: \"thread_list\",\r\n    SINGLE_THREAD: \"single_thread\",\r\n    LOGIN: \"login\"\r\n};\r\n\r\nexport const INITIAL_STATE = {\r\n    loginState: LOGIN_STATE.LOGGED_OUT,\r\n    view: VIEW_STATE.THREAD_LIST,\r\n    user: -1,\r\n    threads: [],\r\n    singleId: \"\",\r\n    searchTags: [],\r\n    testState: false\r\n};","import { LOGIN_SUCCESS, INVALID_LOGIN, LOGIN_NETWORK_ERROR, LOGOUT } from \"../actionConstants\";\r\nimport { LOGIN_STATE } from \"../storeConstants\";\r\n\r\nconst INITIAL_STATE = {\r\n    loginState: LOGIN_STATE.LOGGED_OUT\r\n};\r\n\r\nexport const loginReducer = (state=INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case LOGIN_SUCCESS:\r\n            return { loginState: LOGIN_STATE.LOGGED_IN }\r\n        case INVALID_LOGIN:\r\n            return {loginState: LOGIN_STATE.INVALID_LOGIN }\r\n        case LOGIN_NETWORK_ERROR:\r\n            return {loginState: LOGIN_STATE.NETWORK_ERROR }\r\n        case LOGOUT:\r\n            return {loginState: LOGIN_STATE.LOGGED_OUT }\r\n        default:\r\n            return state;\r\n    };\r\n};","import { VIEW_STATE } from \"../storeConstants\";\r\nimport { VIEW_LIST, VIEW_SINGLE, VIEW_LOGIN } from \"../actionConstants\";\r\n\r\nconst INITIAL_STATE = {\r\n    view: VIEW_STATE.THREAD_LIST,\r\n    singleId: \"\",\r\n    searchTags: []\r\n};\r\n\r\nexport const viewReducer  = (state=INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case VIEW_LIST:\r\n            return {\r\n                ...state,\r\n                view: VIEW_STATE.THREAD_LIST,\r\n                singleId: \"\",\r\n                searchTags: action.payload.searchTags \r\n            };\r\n        case VIEW_SINGLE:\r\n            return {\r\n                ...state, \r\n                view: VIEW_STATE.SINGLE_THREAD,\r\n                singleId: action.payload.threadId \r\n            };\r\n        case VIEW_LOGIN:\r\n            return {\r\n                ...state,\r\n                view: VIEW_STATE.LOGIN,\r\n            }\r\n        default:\r\n            return state;\r\n    };\r\n};","import { LOGIN_SUCCESS, LOGOUT } from \"../actionConstants\";\r\n\r\nconst INITIAL_STATE = {};\r\n\r\nexport const userReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case LOGIN_SUCCESS:\r\n            return action.payload.user;\r\n        case LOGOUT:\r\n            return INITIAL_STATE;\r\n        default:\r\n            return state;\r\n    };\r\n};","import { READ_THREADS, ADD_REPLY } from \"../actionConstants\";\r\n\r\nconst INITIAL_STATE = [];\r\n\r\nexport const threadReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case READ_THREADS:\r\n            return [...action.payload.threads];\r\n        case ADD_REPLY:\r\n            const mergedReplies = [\r\n                ...state.filter(thread =>\r\n                    action.payload.threadId === thread.id\r\n                )[0].replies, \r\n                action.payload.reply\r\n            ];\r\n            const newState = state.map(thread => \r\n                thread.id === action.payload.threadId ? \r\n                    {\r\n                        ...thread,\r\n                        replies : mergedReplies\r\n                    }\r\n                    :\r\n                    thread\r\n            );\r\n            return newState;  \r\n        default:\r\n            return state;\r\n    };\r\n};","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { loginReducer } from \"./reducers/loginReducer\";\r\nimport { viewReducer } from \"./reducers/viewReducer\";\r\nimport { userReducer } from \"./reducers/userReducer\";\r\nimport { threadReducer } from \"./reducers/threadReducer\";\r\nimport { testReducer } from \"./reducers/testReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    loginReducer,\r\n    viewReducer,\r\n    user: userReducer,\r\n    threads: threadReducer,\r\n    testState: testReducer\r\n})\r\n\r\nexport default createStore(rootReducer, applyMiddleware(thunkMiddleware));","const INITIAL_STATE = false;\r\n\r\nexport const testReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    };\r\n};","import { VIEW_LIST, VIEW_SINGLE, VIEW_LOGIN } from \"../actionConstants\";\r\n\r\nexport const showList = searchTags => ({\r\n    type: VIEW_LIST,\r\n    payload: {\r\n        searchTags\r\n    }\r\n});\r\n\r\nexport const showSingle = threadId => ({\r\n    type: VIEW_SINGLE,\r\n    payload: {\r\n        threadId\r\n    }\r\n});\r\n\r\nexport const showLogin = () => ({\r\n    type: VIEW_LOGIN\r\n});","import PropTypes from \"prop-types\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { showList, showSingle } from \"../redux/actions/viewActions\";\r\n\r\nconst ThreadSnippet = (props) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const parseTimestamp = (seconds) => {\r\n        let dateTime = new Date(seconds);\r\n        // now we need to parse the time object into a string\r\n        let timeStamp = dateTime.toLocaleDateString(\"en-US\", { year: '2-digit', month: 'long', day: 'numeric' }) + \" at \" + dateTime.toLocaleTimeString(\"en-US\", {timeZone: 'America/New_York', hourCycle: 'h24'});\r\n        return timeStamp;\r\n    };\r\n\r\n    const parseTags = (rawBody) => {\r\n        //console.log(\"Raw body:\", rawBody);\r\n        let parsedBody =  rawBody.split(\" \").map((word, index) => \r\n            word.charAt(0) === \"#\" ?\r\n                <a className=\"tag\" href=\"#\" value={word} onClick={() => dispatch(showList(word))} key={index}>{word}</a>\r\n                :\r\n                word        \r\n        );\r\n        let rtn = [];\r\n        for(let word of parsedBody) {\r\n            rtn.push(word);\r\n            rtn.push(\" \");\r\n        }\r\n        rtn.pop();\r\n        return rtn;\r\n    };\r\n\r\n    const truncateBody = () => {\r\n        if (props.thread.body.length > 200) {\r\n            return parseTags(props.thread.body.substring(0,200) + \"...\");\r\n        } else {\r\n            return parseTags(props.thread.body);\r\n        }        \r\n    };\r\n\r\n    return (\r\n        <div className=\"list-group-item\" data-testid=\"thread-snippet-test\">\r\n            <a className=\"thread-title\" href=\"#\" onClick={() => dispatch(showSingle(props.thread.id))}><h3>{props.thread.title}</h3></a>\r\n            <p>Author: {props.thread.author}</p>\r\n            <p>{truncateBody()}</p>\r\n            <p>Posted: {parseTimestamp(props.thread.timestamp)}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ThreadSnippet;\r\n\r\nThreadSnippet.propTypes = {\r\n    thread: PropTypes.object.isRequired\r\n};","import { useSelector } from \"react-redux\";\r\nimport ThreadSnippet from \"./ThreadSnippet\";\r\n\r\nconst ThreadList = () => {\r\n    const threads = useSelector(state => state.threads);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                threads.length > 0 ?\r\n                    threads.map((thread, index) => \r\n                        <ThreadSnippet key={index} thread={thread}/>\r\n                    )\r\n                    :\r\n                    <p>No threads to display.</p>\r\n            }\r\n            \r\n        </>\r\n    );\r\n};\r\n\r\nexport default ThreadList;","import PropTypes from \"prop-types\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { showList } from \"../redux/actions/viewActions\";\r\n\r\nconst Reply = (props) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const parseTimestamp = (seconds) => {\r\n        let dateTime = new Date(seconds);\r\n        // now we need to parse the time object into a string\r\n        let timeStamp = dateTime.toLocaleDateString(\"en-US\", { year: '2-digit', month: 'long', day: 'numeric' }) + \" at \" + dateTime.toLocaleTimeString(\"en-US\", {timeZone: 'America/New_York', hourCycle: 'h24'});\r\n        return timeStamp;\r\n    };\r\n\r\n    const parseTags = (rawBody) => {\r\n        let parsedBody =  rawBody.split(\" \").map(word => \r\n            word.charAt(0) === \"#\" ?\r\n                <a className=\"tag\" href=\"#\" onClick={() => dispatch(showList(word))}>{word}</a>\r\n                :\r\n                word        \r\n        );\r\n        let rtn = [];\r\n        for(let word of parsedBody) {\r\n            rtn.push(word);\r\n            rtn.push(\" \");\r\n        }\r\n        rtn.pop();\r\n        return rtn;\r\n    };\r\n\r\n    return (\r\n        <div className=\"list-group-item\">\r\n            <p>Author: {props.reply.author}</p>\r\n            <p>{parseTags(props.reply.body)}</p>\r\n            <p>Replied: {parseTimestamp(props.reply.timestamp)}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Reply;\r\n\r\nReply.propTypes = {\r\n    reply: PropTypes.object.isRequired\r\n};","import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDDYfwcl9nuD6NrGgToNatyDgcROdZb54w\",\r\n    authDomain: \"cs7580-a5-message-board.firebaseapp.com\",\r\n    projectId: \"cs7580-a5-message-board\",\r\n    storageBucket: \"cs7580-a5-message-board.appspot.com\",\r\n    messagingSenderId: \"575151180871\",\r\n    appId: \"1:575151180871:web:d7469bf4bfca3e2c927562\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nexport default firebase;","import { READ_THREADS, ADD_REPLY } from \"../actionConstants\";\r\nimport store from \"../store\";\r\nimport firebase from \"../../fbConfig\";\r\n\r\nconst database = firebase.firestore();\r\n\r\nexport const readThreads = threads => ({\r\n    type: READ_THREADS,\r\n    payload: {\r\n        threads\r\n    }\r\n});\r\n\r\nexport const addReply = (threadId, reply) => ({\r\n    type: ADD_REPLY,\r\n    payload: {\r\n        threadId,\r\n        reply\r\n    }\r\n});\r\n\r\nexport const readAllThreads = () => {\r\n    return dispatch => {\r\n        database.collection(\"threads\").get()\r\n            .then(querySnapshot => {\r\n                let threads = [];\r\n                querySnapshot.forEach(doc => {\r\n                    threads.push({\r\n                        id: doc.id,\r\n                        ...doc.data()\r\n                    })\r\n                })\r\n                threads.sort((threadA, threadB) => threadA.timestamp - threadB.timestamp);\r\n                dispatch(readThreads(threads));\r\n            })\r\n            .catch(error => {\r\n                console.log(\"Server error\", error);\r\n            });\r\n    };\r\n};\r\n\r\nexport const readThreadByID = (id) => {\r\n    return dispatch => {\r\n        database.collection(\"threads\").where(\"id\", \"==\", id).get()\r\n            .then(querySnapshot => {\r\n                let threads = [];\r\n                querySnapshot.forEach(doc => {\r\n                    threads.push({\r\n                        id: doc.id,\r\n                        ...doc.data()\r\n                    })\r\n                })\r\n                threads.sort((threadA, threadB) => threadA.timestamp - threadB.timestamp);\r\n                dispatch(readThreads(threads));\r\n            })\r\n            .catch(error => {\r\n                console.log(\"Server error\", error);\r\n            });\r\n    };\r\n};\r\n\r\nexport const readThreadByTag = (searchTags) => {\r\n    return dispatch => {\r\n        database.collection(\"threads\").where(\"tags\", \"array-contains-any\", searchTags).get()\r\n            .then(querySnapshot => {\r\n                let threads = [];\r\n                querySnapshot.forEach(doc => {\r\n                    threads.push({\r\n                        id: doc.id,\r\n                        ...doc.data()\r\n                    });\r\n                });\r\n                threads.sort((threadA, threadB) => threadA.timestamp - threadB.timestamp);\r\n                dispatch(readThreads(threads));\r\n            })\r\n            .catch(error => {\r\n                console.log(\"Server error\", error);\r\n            });\r\n    };\r\n};\r\n\r\nexport const createThread = (thread) => {\r\n    const threads = store.getState().threads;\r\n    return dispatch => {\r\n        database.collection(\"threads\")\r\n            .add(thread)\r\n            .then(newThread => {\r\n                let newThreads = threads.concat([{\r\n                    ...thread,\r\n                    id:  newThread.id\r\n                }])\r\n                newThreads.sort((threadA, threadB) => threadA.timestamp - threadB.timestamp);\r\n                dispatch(readThreads(newThreads));\r\n            })\r\n            .catch(error => console.log(error));\r\n    };\r\n};\r\n\r\nexport const createReply = (threadId, reply) => {\r\n    return dispatch => {\r\n        database.collection(\"threads\").doc(threadId)\r\n            .update({\r\n                replies : firebase.firestore.FieldValue.arrayUnion(reply)\r\n            })\r\n            .then(() => {\r\n                dispatch(addReply(threadId, reply));\r\n            })\r\n            .catch(error => {\r\n                console.log(\"Could not add the reply\");\r\n            });\r\n    };\r\n};","import PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { createReply } from \"../redux/actions/threadActions\";\r\n\r\nconst NewReply = (props) => {\r\n    const [body, setBody] = useState(\"\");\r\n    const user = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n\r\n    const postReply = () => {\r\n        let newThread = {\r\n            author : user.id,\r\n            body : body,\r\n            timestamp : Date.now()\r\n        }\r\n        dispatch(createReply(props.threadId, newThread));\r\n        setBody(\"\");\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"form-floating mb-3\">\r\n                <textarea className=\"form-control\" placeholder=\"Reply\" id=\"newReplyBody\"\r\n                    value={body} onChange={e => setBody(e.target.value)}\r\n                />\r\n                <label htmlFor=\"newReplyBody\">Reply content</label>\r\n            </div>\r\n            <button className=\"btn btn-success\" onClick={() => postReply()} disabled={body === \"\" ? true : false}>Post</button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NewReply;\r\n\r\nNewReply.propTypes = {\r\n    threadId: PropTypes.string.isRequired\r\n};","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { LOGIN_STATE } from \"../redux/storeConstants\";\r\nimport { showList, showLogin } from \"../redux/actions/viewActions\"\r\n;\r\nimport Reply from \"./Reply\";\r\nimport NewReply from \"./NewReply\";\r\n\r\nconst ThreadComponent = () => {\r\n    const dispatch = useDispatch();\r\n    const loginState = useSelector(state => state.loginReducer.loginState);\r\n    const threads = useSelector(state => state.threads);\r\n    const threadId = useSelector(state => state.viewReducer.singleId);\r\n\r\n    const parseTimestamp = (seconds) => {\r\n        let dateTime = new Date(seconds);\r\n        // now we need to parse the time object into a string\r\n        let timeStamp = dateTime.toLocaleDateString(\"en-US\", { year: '2-digit', month: 'long', day: 'numeric' }) + \" at \" + dateTime.toLocaleTimeString(\"en-US\", {timeZone: 'America/New_York', hourCycle: 'h24'});\r\n        return timeStamp;\r\n    };\r\n\r\n    const parseTags = (rawBody) => {\r\n        let parsedBody =  rawBody.split(\" \").map((word, index) => \r\n            word.charAt(0) === \"#\" ?\r\n                <a className=\"tag\" href=\"#\" value={word} onClick={() => dispatch(showList(word))} key={index}>{word}</a>\r\n                :\r\n                word        \r\n        );\r\n        let rtn = [];\r\n        for(let word of parsedBody) {\r\n            rtn.push(word);\r\n            rtn.push(\" \");\r\n        }\r\n        rtn.pop();\r\n        return rtn;\r\n    };\r\n\r\n    return (\r\n        <>            \r\n            {\r\n                threads.filter(thread => threadId === thread.id).map((thread, index) => \r\n                    <div className=\"card card-body\" key={index}>\r\n                        <div className=\"list-group-flush\">\r\n                            <div className=\"list-group-item\">\r\n                                <div className=\"thread-title-box\">\r\n                                    <h3>{thread.title}</h3>\r\n                                    <button type=\"button\" className=\"btn-close\" aria-label=\"Close\" onClick={() => dispatch(showList(\"\"))}/>\r\n                                </div>                                \r\n                                <p>Author: {thread.author}</p>\r\n                                <p>{parseTags(thread.body)}</p>\r\n                                <p>Posted: {parseTimestamp(thread.timestamp)}</p>\r\n                            </div>\r\n                            <div className=\"list-group-item\">\r\n                                {\r\n                                    loginState === LOGIN_STATE.LOGGED_IN ?\r\n                                        <NewReply threadId={thread.id}/>\r\n                                        :\r\n                                        <>\r\n                                            <p>Want to join the conversation? <button className=\"btn btn-success\" onClick={() => dispatch(showLogin())}>Log In</button></p>\r\n                                        </>\r\n                                }\r\n                            </div> \r\n                            {\r\n                                thread.replies.map((reply, index) =>\r\n                                    <Reply key={index} reply={reply} />\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ThreadComponent;","import { LOGIN_SUCCESS, INVALID_LOGIN, LOGIN_NETWORK_ERROR, LOGOUT } from \"../actionConstants\";\r\nimport { showList } from \"./viewActions\";\r\nimport firebase from \"../../fbConfig\";\r\n\r\nconst database = firebase.firestore();\r\n\r\nexport const loginSuccess = user => ({\r\n    type: LOGIN_SUCCESS,\r\n    payload: {\r\n        user\r\n    }\r\n});\r\n\r\nexport const loginFail = () => ({\r\n    type: INVALID_LOGIN\r\n});\r\n\r\nexport const loginNetworkError = () => ({\r\n    type: LOGIN_NETWORK_ERROR\r\n});\r\n\r\nexport const logout = () => ({\r\n    type: LOGOUT\r\n});\r\n\r\nexport const validateUser = (username, password) => {\r\n    return dispatch => {\r\n        database.collection(\"users\").where(\"username\", \"==\", username).where(\"password\", \"==\", password)\r\n            .get()\r\n            .then(querySnapshot => {\r\n                if (querySnapshot.size === 1) {\r\n                    const doc = querySnapshot.docs[0];\r\n                    const user = {\r\n                        id: doc.id\r\n                    }\r\n                    dispatch(loginSuccess(user));\r\n                    dispatch(showList([]));\r\n                } else {\r\n                    console.log(\"Login failure\");\r\n                    dispatch(loginFail());\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(\"Login error\", error);\r\n                dispatch(loginNetworkError());\r\n            });\r\n    };\r\n};","import { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { createThread } from \"../redux/actions/threadActions\";\r\n\r\nconst NewThread = () => {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [body, setBody] = useState(\"\");\r\n    const [tags, setTags] = useState([]);\r\n\r\n    const user = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        let newTags = body.split(\" \").filter(word => word.charAt(0) === \"#\");\r\n        setTags(newTags);\r\n    }, [body]);\r\n\r\n    const postThread = () => {\r\n        let newThread = {\r\n            author : user.id,\r\n            body : body,\r\n            replies : [],\r\n            tags : tags,\r\n            timestamp : Date.now(),\r\n            title : title\r\n        }\r\n        dispatch(createThread(newThread));\r\n        setTitle(\"\");\r\n        setBody(\"\");\r\n        setTags([]);\r\n    };\r\n\r\n    return (\r\n        <div className=\"list-group-item\">\r\n            <button className=\"btn btn-primary start-thread-open\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#startThreadCollapse\" aria-expanded=\"false\" aria-controls=\"startThreadCollapse\">\r\n                Start a new thread\r\n            </button>\r\n            <div className=\"collapse mt-3\" id=\"startThreadCollapse\">\r\n                <div className=\"form-floating mb-3\">\r\n                    <input type=\"text\" className=\"form-control\" id=\"newThreadTitle\" placeholder=\"Thread title\"\r\n                        value={title} onChange={e => setTitle(e.target.value)}\r\n                    />\r\n                    <label htmlFor=\"newThreadTitle\">Thread title</label>\r\n                </div>\r\n                <div className=\"form-floating mb-3\">\r\n                    <textarea className=\"form-control\" placeholder=\"Thread content\" id=\"newThreadBody\"\r\n                        value={body} onChange={e => setBody(e.target.value)} rows=\"5\"\r\n                    />\r\n                    <label htmlFor=\"newThreadBody\">Thread content</label>\r\n                </div>\r\n                <button className=\"btn btn-success start-thread-submit\" onClick={() => postThread()} disabled={title === \"\" || body === \"\" ? true : false}>Post</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NewThread;","import { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { readAllThreads, readThreadByTag } from \"../redux/actions/threadActions\";\r\n\r\nconst SearchTags = () => {\r\n    const stateSearchTags = useSelector(state => state.viewReducer.searchTags);\r\n\r\n    const [search, setSearch] = useState(\"\");\r\n    console.log(\"Search now equals\", search);\r\n    const [searchTags, setSearchTags] = useState([]);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n            dispatch(readAllThreads());   \r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (search !== \"\") {\r\n            let newTags = search.split(\" \").map(word => word.charAt(0) !== \"#\" ? \"#\" + word : word);\r\n            setSearchTags(newTags);\r\n            console.log(\"Set new tags\", newTags);\r\n        }        \r\n    }, [search]);\r\n\r\n    useEffect(() => {\r\n        let tagString = \"\";\r\n        for(let tag of stateSearchTags) {\r\n            tagString = tagString + tag + \"\";\r\n        };\r\n        if (tagString !== \"\") {\r\n            setSearch(tagString);\r\n            let newTags = tagString.split(\" \").map(word => word.charAt(0) !== \"#\" ? \"#\" + word : word);\r\n            setSearchTags(newTags);\r\n            dispatch(readThreadByTag(newTags));\r\n        }\r\n    }, [stateSearchTags, dispatch])\r\n\r\n    const submitSearch = () => {\r\n        if (search === \"\") {\r\n            searchAll();\r\n        } else {\r\n            dispatch(readThreadByTag(searchTags));\r\n        }        \r\n    };\r\n\r\n    const searchAll = () => {\r\n        setSearch(\"\");\r\n        dispatch(readAllThreads());\r\n    };\r\n\r\n    const handleKeyPress = event => {\r\n        if (event.keyCode === 13) {\r\n            event.preventDefault();\r\n            submitSearch();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"form-floating input-group mb-3\">\r\n                <input type=\"text\" className=\"form-control\" placeholder=\"Search by tags\" id=\"tagSearch\"\r\n                    value={search} onChange={e => setSearch(e.target.value)} onKeyUp={e => handleKeyPress(e)}\r\n                />\r\n                <label htmlFor=\"tagSearch\">Search threads by tag</label>\r\n                {\r\n                    search !== \"\" ?\r\n                        <button className=\"btn btn-outline-secondary\" onClick={() => searchAll()}>X</button>\r\n                        :\r\n                        <></>\r\n                }                \r\n                <button className=\"btn btn-outline-success\" onClick={() => submitSearch()}>Search</button>\r\n            </div>            \r\n        </>\r\n    );\r\n};\r\n\r\nexport default SearchTags;","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { validateUser } from \"../redux/actions/loginActions\";\r\nimport { LOGIN_STATE } from \"../redux/storeConstants\";\r\n\r\nlet editingBegun = false;\r\n\r\n// Predominantly borrowed from demo to-do list code (Northeastern University CS7580 Lab 8)\r\nconst Login = () => {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const loginState = useSelector(state => state.loginReducer.loginState);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleLogin = () => {\r\n        dispatch(validateUser(username, password));\r\n        clearForm();\r\n    }\r\n\r\n    const handleKeyPress = event => {\r\n        if (event.keyCode === 13) {\r\n            event.preventDefault();\r\n            handleLogin();\r\n        }\r\n    }\r\n\r\n    const clearForm = () => {\r\n        editingBegun = false;\r\n        setUsername(\"\");\r\n        setPassword(\"\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {\r\n                !editingBegun && loginState === LOGIN_STATE.INVALID_LOGIN &&\r\n                    <div className=\"alert alert-danger\">Invalid username / password! Please try again.</div>\r\n            }\r\n            {\r\n                !editingBegun && loginState === LOGIN_STATE.NETWORK_ERROR &&\r\n                    <div className=\"alert alert-danger\">Unable to connect to the server. Please check your internet connection.</div>\r\n            }\r\n            <div className=\"row my-4 add-form\">\r\n                <div className=\"col-12 col-sm-2\">\r\n                    <label htmlFor=\"username\" className=\"form-label\">Username:</label>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <input type=\"text\" id=\"username\" name=\"username\" \r\n                        className=\"form-control\"\r\n                        value={username} onChange={e => {\r\n                            editingBegun = true;\r\n                            setUsername(e.target.value);\r\n                            }}\r\n                            onKeyUp={e => handleKeyPress(e)}\r\n                            />\r\n                </div>\r\n            </div>\r\n            <div className=\"row my-4 add-form\">\r\n                <div className=\"col-12 col-sm-2\">\r\n                    <label htmlFor=\"password\" className=\"form-label\">Password:</label>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <input type=\"password\" id=\"password\" name=\"password\"\r\n                        className=\"form-control\"\r\n                        value={password} onChange={e => {\r\n                                editingBegun = true;\r\n                                setPassword(e.target.value);\r\n                        }}\r\n                        onKeyUp={e => handleKeyPress(e)}\r\n                            />\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <button className=\"btn btn-secondary float-end login-button\" onClick={handleLogin}>\r\n                        Log in\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport ThreadList from '../components/ThreadList';\r\nimport ThreadComponent from \"../components/ThreadComponent\";\r\nimport { LOGIN_STATE, VIEW_STATE } from \"../redux/storeConstants\";\r\nimport { showLogin } from \"../redux/actions/viewActions\"\r\nimport { logout } from \"../redux/actions/loginActions\";\r\nimport NewThread from \"../components/NewThread\";\r\nimport SearchTags from \"../components/SearchTags\";\r\nimport Login from \"../components/Login\";\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch();\r\n    const loginState = useSelector(state => state.loginReducer.loginState);\r\n    const view = useSelector(state => state.viewReducer.view);\r\n\r\n    return (\r\n        <div className=\"App container\">\r\n            {\r\n                view === VIEW_STATE.LOGIN ?\r\n                    <Login />\r\n                    :\r\n                    <>\r\n                        <nav className=\"navbar\">{\r\n                            loginState !== LOGIN_STATE.LOGGED_IN ?\r\n                                <button className=\"btn btn-success heading-button\" onClick={() => dispatch(showLogin())}>Log In</button>\r\n                                :\r\n                                <button className=\"btn btn-secondary heading-button\" onClick={() => dispatch(logout())}>Log Out</button>\r\n                        }</nav>\r\n                        {\r\n                            view === VIEW_STATE.THREAD_LIST ?\r\n                                <>\r\n                                    <SearchTags />\r\n                                    <div className=\"card card-body list-group-flush\">\r\n                                        {\r\n                                            loginState === LOGIN_STATE.LOGGED_IN ?\r\n                                                <NewThread />\r\n                                                :\r\n                                                <div className=\"list-group-item\">\r\n                                                    <p>Want to join the conversation? <button className=\"btn btn-success\" onClick={() => dispatch(showLogin())}>Log In</button></p>\r\n                                                </div>\r\n                                        }\r\n                                        <ThreadList />\r\n                                    </div>                        \r\n                                </>                    \r\n                                :\r\n                                <>{\r\n                                    view === VIEW_STATE.SINGLE_THREAD ?\r\n                                        <ThreadComponent />\r\n                                        :\r\n                                        <p>Error: view set to {view}</p>                            \r\n                                }</>\r\n                        }\r\n                    </>\r\n            }            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from \"react-redux\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport bootstrap from 'bootstrap';\r\nimport store from \"./redux/store\";\r\nimport './styles/styles.css';\r\nimport './styles/index.css';\r\nimport App from './view/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>    \r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}